@prefix rdf:            <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:           <http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:            <http://www.w3.org/2002/07/owl#>.
@prefix skos:           <http://www.w3.org/2004/02/skos/core#>.
@prefix skosxl:         <http://www.w3.org/2008/05/skos-xl#>.
@prefix xsd:            <http://www.w3.org/2001/XMLSchema#>.

@prefix bibo:           <http://purl.org/ontology/bibo/> .
@prefix dcat:           <http://www.w3.org/ns/dcat#>.
@prefix dce:            <http://purl.org/dc/elements/1.1/>.
@prefix dct:            <http://purl.org/dc/terms/>.
@prefix dwc:            <http://rs.tdwg.org/dwc/terms/> .
@prefix dwciri:         <http://rs.tdwg.org/dwc/iri/> .
@prefix foaf:           <http://xmlns.com/foaf/0.1/>.
@prefix prov:           <http://www.w3.org/ns/prov#>.
@prefix ro:             <http://purl.obolibrary.org/obo/>.
@prefix schema:         <http://schema.org/>.
@prefix tn:             <http://rs.tdwg.org/ontology/voc/TaxonName#>.
@prefix void:           <http://rdfs.org/ns/void#>.
@prefix wd:             <http://www.wikidata.org/entity/>.           # Wikibase entity
@prefix wdt:            <http://www.wikidata.org/prop/direct/>.      # truthy assertions

@prefix taxref:         <http://taxref.mnhn.fr/lod/>.
@prefix taxrefbgs:      <http://taxref.mnhn.fr/lod/bioGeoStatus/>.
@prefix taxrefhab:      <http://taxref.mnhn.fr/lod/habitat/>.
@prefix taxrefloc:      <http://taxref.mnhn.fr/lod/loc/>.
@prefix taxrefprop:     <http://taxref.mnhn.fr/lod/property/>.
@prefix taxrefrk:       <http://taxref.mnhn.fr/lod/taxrank/>.
@prefix taxrefstatus:   <http://taxref.mnhn.fr/lod/status/>.

@prefix xrr:            <http://i3s.unice.fr/xr2rml#> .
@prefix rr:             <http://www.w3.org/ns/r2rml#> .
@prefix rml:            <http://semweb.mmlab.be/ns/rml#> .


<#LS_ReferenceName>
    a xrr:LogicalSource;
    xrr:query """db.taxonomy.find( { $where: 'this.id == this.referenceId' } )""";
    xrr:uniqueRef "$.id" .
<#LS_SynonymName>
    a xrr:LogicalSource;
    xrr:query """db.taxonomy.find( { $where: 'this.id != this.referenceId' } )""";
    xrr:uniqueRef "$.id".

<#SM_Name>
    a rr:SubjectMap;
    rr:template "http://taxref.mnhn.fr/lod/name/{$.id}";
    rr:class skos:Concept, tn:TaxonName.


<#TM_Reference_Name>
    a rr:TriplesMap;
    xrr:logicalSource <#LS_ReferenceName>;
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate skos:inScheme ;
        rr:objectMap [ rr:constant <http://taxref.mnhn.fr/lod/taxref-ld/{{TAXREFVER}}>; rr:termType rr:IRI ];
    ];
    rr:predicateObjectMap [
        rr:predicate rdfs:label;
        rr:objectMap [ xrr:reference "$.fullName"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate skos:prefLabel, dwc:scientificName, tn:nameComplete;
        rr:objectMap [ xrr:reference "$.scientificName"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasAuthority;
        rr:objectMap [ xrr:reference "$.authority"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate taxrefprop:isReferenceNameOf;
        rr:objectMap [ rr:template "http://taxref.mnhn.fr/lod/taxon/{$.id}/{{TAXREFVER}}"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate skos:broader;
        rr:objectMap [ rr:template "http://taxref.mnhn.fr/lod/name/{$.codeParent}"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate foaf:page;
        rr:objectMap [ rr:template "https://inpn.mnhn.fr/espece/cd_nom/{$.id}?lg=en"; ];
    ];
	.

<#TM_Synonym_Name>
    a rr:TriplesMap;
    xrr:logicalSource <#LS_SynonymName>;
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate skos:inScheme ;
        rr:objectMap [ rr:constant <http://taxref.mnhn.fr/lod/taxref-ld/{{TAXREFVER}}>; rr:termType rr:IRI; ];
    ];
    rr:predicateObjectMap [
        rr:predicate rdfs:label;
        rr:objectMap [ xrr:reference "$.fullName"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate skos:prefLabel;
        rr:objectMap [ xrr:reference "$.scientificName"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate dwc:scientificName;
        rr:objectMap [ xrr:reference "$.scientificName"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasAuthority;
        rr:objectMap [ xrr:reference "$.authority"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate taxrefprop:isSynonymOf;
        rr:objectMap [ rr:template "http://taxref.mnhn.fr/lod/taxon/{$.referenceId}/{{TAXREFVER}}"; ];
    ];
    rr:predicateObjectMap [
        rr:predicate foaf:page;
        rr:objectMap [ rr:template "https://inpn.mnhn.fr/espece/cd_nom/{$.id}?lg=en"; ];
    ];
	.

# ---------------------------------------------------------------------------------
# Taxonomical rank for names
# ---------------------------------------------------------------------------------

<#TM_Name_TaxonomicalRank_SuperKingdom>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SPRG'} )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:superkingdom; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Kingdom>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'KD' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:kingdom; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubKingdom>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SSRG' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:subkingdom; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_InfraKingdom>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'IFRG' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Infrakingdom; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Phylum>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'PH' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Phylum; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubPhylum>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SBPH' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubPhylum; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_InfraPhylum>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'IFPH' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:InfraPhylum; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Division>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'DV' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Division; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubDivision>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SBDV' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubDivision; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SuperClass>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SPCL' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SuperClass; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Cladus>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'CLAD' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Cladus; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Class>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'CL' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Class; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubClass>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SBCL' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubClass; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_InfraClass>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'IFCL' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:InfraClass; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Legio>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'LEG' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Legio; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SuperOrder>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SPOR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SuperOrder; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Cohorte>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'COH' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Cohort; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Order>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'OR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Order; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubOrder>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SBOR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubOrder; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_InfraOrder>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'IFOR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:InfraOrder; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SuperFamily>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SPFM' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SuperFamily; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Family>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'FM' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Family; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubFamily>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SBFM' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubFamily; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Tribe>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'TR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Tribe; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubTribe>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SSTR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubTribe; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Genus>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'GN' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Genus; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubGenus>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SSGN' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubGenus; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Section>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SC' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Section; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubSection>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SBSC' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubSection; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Series>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SER' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Series; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubSeries>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SSER' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubSeries; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Agregate>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'AGES' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Agregate; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Species>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'ES' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Species; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SemiSpecies>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SMES' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SemiSpecies; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_MicroSpecies>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'MES' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:MicroSpecies; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubSpecies>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SSES' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubSpecies; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Natio>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'NAT' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Natio; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Varietas>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'VAR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Varietas; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubVarietas>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SVAR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubVarietas; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Forma>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'FO' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Forma; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_SubForma>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'SSFO' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:SubForma; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_FormaSpecies>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'FOES' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:FormaSpecies; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Linea>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'LIN' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Linea; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Clone>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'CLO' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Clone; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Race>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'RACE' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Race; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Cultivar>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'CAR' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Cultivar; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Morpha>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'MO' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Morpha; rr:termType rr:IRI; ];
    ].

<#TM_Name_TaxonomicalRank_Abberation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.taxonomy.find( {'rankId' : 'AB' } )"""; ];
    rr:subjectMap <#SM_Name>;
    rr:predicateObjectMap [
        rr:predicate taxrefprop:hasRank;
        rr:objectMap [ rr:constant taxrefrk:Abberatio; rr:termType rr:IRI; ];
    ].
