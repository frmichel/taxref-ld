@prefix xrr:  <http://i3s.unice.fr/xr2rml#> .
@prefix rr:   <http://www.w3.org/ns/r2rml#> .
@prefix rml:  <http://semweb.mmlab.be/ns/rml#> .

@prefix xsd:  	<http://www.w3.org/2001/XMLSchema#> .
@prefix dct:  	<http://purl.org/dc/terms/> .
@prefix skos: 	<http://www.w3.org/2004/02/skos/core#>.
@prefix rdfs: 	<http://www.w3.org/2000/01/rdf-schema#>.
@prefix rdf: 	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix owl:  	<http://www.w3.org/2002/07/owl#>.
@prefix dct:  	<http://purl.org/dc/terms/>.
@prefix foaf: 	<http://xmlns.com/foaf/0.1/>.
@prefix schema: <http://schema.org/>.
@prefix wdt:	<http://www.wikidata.org/entity/>.

@prefix taxrefloc: <http://taxref.mnhn.fr/lod/loc/>.

<#SM>
    a rr:SubjectMap;
    rr:template "http://taxref.mnhn.fr/lod/location/{$.id}".

<#TM>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.locations.find({$where: 'this.id == this.referenceId'}  )""" ];
    rr:subjectMap <#SM>;
    rr:predicateObjectMap [
        rr:predicate rdfs:isDefinedBy;
        rr:objectMap [ rr:constant <http://taxref.mnhn.fr/lod/taxref-ld/{{TAXREFVER}}>; rr:termType rr:IRI ];
    ];
	rr:predicateObjectMap [
        rr:predicate rdfs:label, wdt:P2561;             # P2561 = name
        rr:objectMap [ xrr:reference "$.name"; rr:datatype xsd:string ];
    ];
    rr:predicateObjectMap [
        rr:predicate wdt:P298;                          # ISO 3166-1 alpha-3 code
        rr:objectMap [ xrr:reference "$.iso31661"; rr:datatype xsd:string ];
    ];
	rr:predicateObjectMap [
        rr:predicate wdt:P300;                          # ISO 3166-2 code
        rr:objectMap [ xrr:reference "$.iso31662"; rr:datatype xsd:string ];
    ];
	rr:predicateObjectMap [
        rr:predicate wdt:P276;                          # location 
        rr:objectMap [ rr:template "http://taxref.mnhn.fr/lod/location/{$.parentId}" ];
    ];
	rr:predicateObjectMap [
        rr:predicate owl:sameAs;
        rr:objectMap [ xrr:reference "$.inseeUri"; rr:termType rr:IRI; ];
		rr:objectMap [ xrr:reference "$.ignUri"; rr:termType rr:IRI; ];
		rr:objectMap [ xrr:reference "$.wikidataUri"; rr:termType rr:IRI; ];
		rr:objectMap [ xrr:reference "$.geonamesUri"; rr:termType rr:IRI; ];
    ];
    .

#------------------------------------- Administrative entities -------------------------------------

# Municipal arrondissement
<#TM_Arrondisement>
    a rr:TriplesMap;
    xrr:logicalSource [
        xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'Arrondissement municipal' }   )"""
    ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q702842; rr:termType rr:IRI ]];
    .
# Commune of France
<#TM_Commune>
    a rr:TriplesMap;
    xrr:logicalSource [
        xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'Commune'})"""
    ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q484170; rr:termType rr:IRI ]];
    .
# Departments of France
<#TM_Department>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query
        """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'Département'})"""
    ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q6465; rr:termType rr:IRI ]];
    .
# Region of France
<#TM_Region>
    a rr:TriplesMap;
    xrr:logicalSource [
        xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'Région'})"""
    ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q36784; rr:termType rr:IRI ]];
    .
# Overseas collectivity
<#TM_OverseasCollectivity>
    a rr:TriplesMap;
    xrr:logicalSource [
        xrr:query """db.locations.find({$where: 'this.id == this.referenceId', "adminLevel": "Collectivité d'outre-mer"}  )"""
    ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q719487; rr:termType rr:IRI ]];     # overseas collectivity 
    .
# Sovereign state
<#TM_State>
    a rr:TriplesMap;
    xrr:logicalSource [
        xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'État'})"""
    ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q3624078; rr:termType rr:IRI ]];    # sovereign state
    .
# Administrative territorial entity of France
<#TM_Subdivision_administrative>
    a rr:TriplesMap;
    xrr:logicalSource [
        xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'Subdivision administrative'})"""
    ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q192498; rr:termType rr:IRI ]];     # administrative territorial entity of France
    .

#------------------------------------- Geographical entities -------------------------------------

# Territorial entity
<#TM_Territoire_Region_Continental>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': { $in: ['Région continentale', 'Territoire'] }})""" ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q1496967; rr:termType rr:IRI ]];
    .
# Archipelago
<#TM_Archipel>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'Archipel'})""" ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q33837; rr:termType rr:IRI ]];
    .
# Island
<#TM_Island>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': 'Île'})""" ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant wdt:Q23442; rr:termType rr:IRI ]];
    .

#------------------------------------- TAXREF-specific entities -------------------------------------

<#TM_ZM_ZMM>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.locations.find({$where: 'this.id == this.referenceId', 'adminLevel': { $in: ['ZM', 'ZMM'] }} )""" ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [ rr:predicate rdf:type; rr:objectMap [ rr:constant taxrefloc:MaritimeArea; rr:termType rr:IRI ]];
    .

#------------------------------------- Dealing with synonyms -------------------------------------

<#TM_synonyms>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.locations.find({$where: 'this.id != this.referenceId'}  )""" ];
    rr:subjectMap <#SM>;
	rr:predicateObjectMap [
        rr:predicate owl:sameAs;
        rr:objectMap [ rr:template "http://taxref.mnhn.fr/lod/location/{$.referenceId}"; rr:termType rr:IRI; ];
    ];
    .
